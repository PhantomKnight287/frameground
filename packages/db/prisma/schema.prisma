datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  roles         Role[]
  username      String?     @unique
  accounts      Account[]
  sessions      Session[]
  tracks        Track[]
  challenges    Challenge[]
  comments      Comment[]
  upvotes       Upvote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Track {
  id          String      @id @unique @default(cuid())
  name        String
  logo        String?
  description String?
  status      TrackStatus @default(coming_soon)
  slug        String      @unique
  users       User[]
  challenges  Challenge[]

  comments Comment[]
  upvotes  Upvote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Challenge {
  id String @id @unique @default(cuid())

  label            String
  description      String
  difficulty       Difficulty
  slug             String
  prerequisites    String[]
  playgroundNeeded Boolean    @default(true)

  /// The tests that a user must pass to complete the challenge
  tests        String
  /// The content of index.md
  info         String
  ///initial files, will be saved as [{filename: content}]
  initialFiles Json[]

  track    Track?    @relation(fields: [trackId], references: [id])
  trackId  String?
  authors  User[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  upvotes   Upvote[]

  @@unique([trackId, slug])
}

model Comment {
  id       String @id @unique @default(cuid())
  content  String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId String?

  track   Track?  @relation(fields: [trackId], references: [id])
  trackId String?
}

model Upvote {
  id       String @id @unique @default(cuid())
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId String?

  track   Track?  @relation(fields: [trackId], references: [id])
  trackId String?
}

enum Difficulty {
  beginner
  easy
  medium
  hard
  extreme
}

enum TrackStatus {
  active
  coming_soon
}

enum Role {
  user
  admin
}
